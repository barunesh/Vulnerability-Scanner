#!/usr/bin/env python
import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:
    def __init__(self, url, ignore_list):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_list

    def extract_url_from_link(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content)

    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        url1 = self.extract_url_from_link(url)
        for link in url1:
            link = urlparse.urljoin(url, link)
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)

    def extract_form(self, url):
        response = self.session.get(url)
        parse_html = BeautifulSoup(response.content)
        return parse_html.findAll("form")

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")
        data_dict = {}
        input_list = form.findAll("input")
        for input in input_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value
            data_dict[input_name] = input_value

        if method == "post":
            return self.session.post(post_url, data=data_dict)
        return self.session.get(post_url, params=data_dict)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_form(link)
            for form in forms:
                print("[+] Testing form in " + link)
                is_vulnerable = self.test_xss_in_form(form, link)
                if is_vulnerable:
                    print("\n\n[***] XSS Discovered in Form of Link " + link)
                    print(form)

            if "=" in link:
                print("[+] Testing link " + link)
                is_vulnerable = self.test_xss_in_link(link)
                if is_vulnerable:
                    print("\n\n[***] XSS Discoved in Link " + link)

    def test_xss_in_link(self, url):
        xss_payload = "<sCript>alert('XSS')</scRipt>"
        url = url.replace("=", "=" + xss_payload)
        response = self.session.get(url)
        return xss_payload in response.content

    def test_xss_in_form(self, form, url):
        xss_payload = "<sCript>alert('XSS')</scRipt>"
        response = self.submit_form(form, xss_payload, url)
        return xss_payload in response.content
